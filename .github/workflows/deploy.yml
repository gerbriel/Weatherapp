name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
      run: npm run build

    - name: Setup Supabase CLI (main branch only)
      if: github.ref == 'refs/heads/main'
      uses: supabase/setup-cli@v1
      with:
        version: latest

    - name: Deploy Supabase (main branch only)
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üîó Linking to Supabase project..."
        supabase link --project-ref fvymxoeupxojvdzqahuw
        
        echo "üìä Pushing database migrations..."
        supabase db push
        
        echo "‚ö° Deploying edge functions..."
        supabase functions deploy send-weather-emails
        
        echo "üîê Setting up secrets..."
        supabase secrets set RESEND_API_KEY="${{ secrets.RESEND_API_KEY }}"
        supabase secrets set FROM_EMAIL="weather@resend.dev"
        
        echo "‚úÖ Supabase deployment completed"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    - name: Copy .nojekyll to dist
      run: cp .nojekyll dist/.nojekyll

    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v4
      with:
        path: ./dist

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      if: github.ref == 'refs/heads/main'

# Permissions needed for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false